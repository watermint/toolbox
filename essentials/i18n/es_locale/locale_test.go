package es_locale

import (
	"strings"
	"testing"
)

func TestThreeToTwoData(t *testing.T) {
	for k, v := range iso631ThreeToTwoLetter {
		if len(k) != 3 || strings.ToLower(k) != k {
			t.Error(k)
		}
		if len(v) != 2 || strings.ToLower(v) != v {
			t.Error(v)
		}
	}
}

func TestParse(t *testing.T) {
	parseShouldSuccess := func(tag string, verification ...func(t *testing.T, l Locale) bool) {
		lc, err := Parse(tag)
		if err != nil {
			t.Error(tag, err)
			return
		}

		for i, v := range verification {
			if !v(t, lc) {
				t.Error(tag, i, "verification failure")
				return
			}
		}
	}

	parseShouldSuccess("ja", func(t *testing.T, l Locale) bool {
		return l.Language() == "ja"
	}, func(t *testing.T, l Locale) bool {
		return l.LanguageTwoLetter() == "ja"
	}, func(t *testing.T, l Locale) bool {
		return l.String() == "ja"
	})

	parseShouldSuccess("ja-JP", func(t *testing.T, l Locale) bool {
		return l.Language() == "ja"
	}, func(t *testing.T, l Locale) bool {
		return l.LanguageTwoLetter() == "ja"
	}, func(t *testing.T, l Locale) bool {
		return l.Region() == "JP"
	}, func(t *testing.T, l Locale) bool {
		return l.String() == "ja-JP"
	})

	parseShouldSuccess("ja_JP", func(t *testing.T, l Locale) bool {
		return l.Language() == "ja"
	}, func(t *testing.T, l Locale) bool {
		return l.LanguageTwoLetter() == "ja"
	}, func(t *testing.T, l Locale) bool {
		return l.Region() == "JP"
	}, func(t *testing.T, l Locale) bool {
		return l.String() == "ja-JP"
	})

	parseShouldSuccess("ja_JP.UTF-8", func(t *testing.T, l Locale) bool {
		return l.Language() == "ja"
	}, func(t *testing.T, l Locale) bool {
		return l.LanguageTwoLetter() == "ja"
	}, func(t *testing.T, l Locale) bool {
		return l.Region() == "JP"
	}, func(t *testing.T, l Locale) bool {
		return l.String() == "ja-JP.UTF-8"
	}, func(t *testing.T, l Locale) bool {
		return l.Data().CodePage == "UTF-8"
	})

	// Mandarin Chinese
	parseShouldSuccess("zh-cmn", func(t *testing.T, l Locale) bool {
		return l.Language() == "zh"
	}, func(t *testing.T, l Locale) bool {
		return l.LanguageTwoLetter() == "zh"
	}, func(t *testing.T, l Locale) bool {
		return l.LanguageExtended() == "cmn"
	}, func(t *testing.T, l Locale) bool {
		return l.String() == "zh-cmn"
	})

	// 	Mandarin Chinese as written in Traditional script
	parseShouldSuccess("zh-cmn-Hant", func(t *testing.T, l Locale) bool {
		return l.Language() == "zh"
	}, func(t *testing.T, l Locale) bool {
		return l.LanguageTwoLetter() == "zh"
	}, func(t *testing.T, l Locale) bool {
		return l.LanguageExtended() == "cmn"
	}, func(t *testing.T, l Locale) bool {
		return l.Script() == "Hant"
	}, func(t *testing.T, l Locale) bool {
		return l.String() == "zh-cmn-Hant"
	})

	for _, ul := range macBigSurLocales {
		parseShouldSuccess(ul, func(t *testing.T, l Locale) bool {
			return l.Language() != ""
		})
	}
	for _, ul := range ubuntuLocales {
		parseShouldSuccess(ul, func(t *testing.T, l Locale) bool {
			return l.Language() != ""
		})
	}
}

func TestLocaleImpl_LanguageTwoLetter(t *testing.T) {
	if lc, err := Parse("ja"); err != nil {
		t.Error(err)
	} else if x := lc.LanguageTwoLetter(); x != "ja" {
		t.Error(x)
	}

	if lc, err := Parse("ja-JP"); err != nil {
		t.Error(err)
	} else if x := lc.LanguageTwoLetter(); x != "ja" {
		t.Error(x)
	}

	if lc, err := Parse("jpn-Jpan-JP"); err != nil {
		t.Error(err)
	} else if x := lc.LanguageTwoLetter(); x != "ja" {
		t.Error(x)
	}

	if lc, err := Parse("ja-JP.UTF-8"); err != nil {
		t.Error(err)
	} else if x := lc.LanguageTwoLetter(); x != "ja" {
		t.Error(x)
	}

	if lc, err := Parse("ja_JP.UTF-8"); err != nil {
		t.Error(err)
	} else if x := lc.LanguageTwoLetter(); x != "ja" {
		t.Error(x)
	}

	for _, lt := range languageTagSamples {
		if lc, err := Parse(lt); err != nil {
			t.Error(lt, err)
		} else if x := lc.LanguageTwoLetter(); len(x) != 0 && len(x) != 2 {
			t.Error(x, err)
		}
	}
}

var (
	languageTagSamples = []string{
		"af-ZA",
		"af",
		"am-ET",
		"am",
		"ar-145",
		"ar-AE",
		"ar-BH",
		"ar-DZ",
		"ar-EG",
		"ar-IQ",
		"ar-JO",
		"ar-KW",
		"ar-LB",
		"ar-LY",
		"ar-MA",
		"ar-OM",
		"ar-Ploc-SA",
		"ar-QA",
		"ar-SA",
		"ar-SY",
		"ar-TN",
		"ar-YE",
		"ar",
		"arn-CL",
		"arn",
		"as-IN",
		"as",
		"az-Cyrl-AZ",
		"az-Cyrl",
		"az-Latn-AZ",
		"az-Latn",
		"az",
		"ba-RU",
		"ba",
		"be-BY",
		"be",
		"bg-BG",
		"bg",
		"bin-NG",
		"bin",
		"bn-BD",
		"bn-IN",
		"bn",
		"bo-BT",
		"bo-CN",
		"bo",
		"br-FR",
		"br",
		"bs-Cyrl-BA",
		"bs-Cyrl",
		"bs-Latn-BA",
		"bs-Latn",
		"bs",
		"ca-ES-valencia",
		"ca-ES",
		"ca",
		"chr-Cher-US",
		"chr-Cher",
		"chr",
		"co-FR",
		"co",
		"cs-CZ",
		"cs",
		"cy-GB",
		"cy",
		"da-DK",
		"da",
		"de-AT",
		"de-CH",
		"de-DE",
		"de-LI",
		"de-LU",
		"de",
		"dsb-DE",
		"dsb",
		"dv-MV",
		"dv",
		"dz-BT",
		"el-GR",
		"el",
		"en-029",
		"en-AE",
		"en-AU",
		"en-BH",
		"en-BZ",
		"en-CA",
		"en-EG",
		"en-GB",
		"en-HK",
		"en-ID",
		"en-IE",
		"en-IN",
		"en-JM",
		"en-JO",
		"en-KW",
		"en-MY",
		"en-NZ",
		"en-PH",
		"en-SG",
		"en-TR",
		"en-TT",
		"en-US",
		"en-YE",
		"en-ZA",
		"en-ZW",
		"en",
		"es-419",
		"es-AR",
		"es-BO",
		"es-CL",
		"es-CO",
		"es-CR",
		"es-CU",
		"es-DO",
		"es-EC",
		"es-ES",
		"es-GT",
		"es-HN",
		"es-MX",
		"es-NI",
		"es-PA",
		"es-PE",
		"es-PR",
		"es-PY",
		"es-SV",
		"es-US",
		"es-UY",
		"es-VE",
		"es",
		"et-EE",
		"et",
		"eu-ES",
		"eu",
		"fa-IR",
		"fa",
		"ff-Latn-SN",
		"ff-Latn",
		"ff-NG",
		"ff",
		"fi-FI",
		"fi",
		"fil-PH",
		"fil",
		"fo-FO",
		"fo",
		"fr-015",
		"fr-029",
		"fr-BE",
		"fr-CA",
		"fr-CD",
		"fr-CH",
		"fr-CI",
		"fr-CM",
		"fr-FR",
		"fr-HT",
		"fr-LU",
		"fr-MA",
		"fr-MC",
		"fr-ML",
		"fr-RE",
		"fr-SN",
		"fr",
		"fy-NL",
		"fy",
		"ga-IE",
		"ga",
		"gd-GB",
		"gd",
		"gl-ES",
		"gl",
		"gn-PY",
		"gn",
		"gsw-FR",
		"gsw",
		"gu-IN",
		"gu",
		"ha-Latn-NG",
		"ha-Latn",
		"ha",
		"haw-US",
		"haw",
		"he-IL",
		"he",
		"hi-IN",
		"hi",
		"hr-BA",
		"hr-HR",
		"hr",
		"hsb-DE",
		"hsb",
		"hu-HU",
		"hu",
		"hy-AM",
		"hy",
		"ibb-NG",
		"ibb",
		"id-ID",
		"id",
		"ig-NG",
		"ig",
		"ii-CN",
		"ii",
		"is-IS",
		"is",
		"it-CH",
		"it-IT",
		"it",
		"iu-Cans-CA",
		"iu-Cans",
		"iu-Latn-CA",
		"iu-Latn",
		"iu",
		"ja-JP",
		"ja-Ploc-JP",
		"ja",
		"ka-GE",
		"ka",
		"khb-Talu-CN",
		"kk-Cyrl",
		"kk-KZ",
		"kk-Latn-KZ",
		"kk-Latn",
		"kk",
		"kl-GL",
		"kl",
		"km-KH",
		"km",
		"kn-IN",
		"kn",
		"ko-KR",
		"ko",
		"kok-IN",
		"kok",
		"kr-Latn-NG",
		"kr",
		"ks-Arab",
		"ks-Deva-IN",
		"ks",
		"ku-Arab-IQ",
		"ku-Arab",
		"ku",
		"ky-KG",
		"ky",
		"la-VA",
		"la",
		"lb-LU",
		"lb",
		"lo-LA",
		"lo",
		"lt-LT",
		"lt",
		"lv-LV",
		"lv",
		"mi-NZ",
		"mi",
		"mk-MK",
		"mk",
		"ml-IN",
		"ml",
		"mn-Cyrl",
		"mn-MN",
		"mn-Mong-CN",
		"mn-Mong-MN",
		"mn-Mong",
		"mn",
		"mni-IN",
		"mni",
		"moh-CA",
		"moh",
		"mr-IN",
		"mr",
		"ms-BN",
		"ms-MY",
		"ms",
		"mt-MT",
		"mt",
		"my-MM",
		"my",
		"nb-NO",
		"nb",
		"ne-IN",
		"ne-NP",
		"ne",
		"nl-BE",
		"nl-NL",
		"nl",
		"nn-NO",
		"nn",
		"no",
		"nso-ZA",
		"nso",
		"oc-FR",
		"oc",
		"om-ET",
		"om",
		"or-IN",
		"or",
		"pa-Arab-PK",
		"pa-Arab",
		"pa-IN",
		"pa",
		"pap-029",
		"pap",
		"pl-PL",
		"pl",
		"plt-MG",
		"prs-AF",
		"prs",
		"ps-AF",
		"ps",
		"pt-BR",
		"pt-PT",
		"pt",
		"qps-ploc",
		"qps-ploca",
		"qps-plocm",
		"quc-CO",
		"quc",
		"qut-GT",
		"qut",
		"quz-BO",
		"quz-EC",
		"quz-PE",
		"quz",
		"rm-CH",
		"rm",
		"ro-MD",
		"ro-RO",
		"ro",
		"ru-MD",
		"ru-RU",
		"ru",
		"rw-RW",
		"rw",
		"sa-IN",
		"sa",
		"sah-RU",
		"sah",
		"sd-Arab-PK",
		"sd-Arab",
		"sd-Deva-IN",
		"sd",
		"se-FI",
		"se-NO",
		"se-SE",
		"se",
		"si-LK",
		"si",
		"sk-SK",
		"sk",
		"sl-SI",
		"sl",
		"sma-NO",
		"sma-SE",
		"sma",
		"smj-NO",
		"smj-SE",
		"smj",
		"smn-FI",
		"smn",
		"sms-FI",
		"sms",
		"so-SO",
		"so",
		"sq-AL",
		"sq",
		"sr-Cyrl-BA",
		"sr-Cyrl-CS",
		"sr-Cyrl-ME",
		"sr-Cyrl-RS",
		"sr-Cyrl",
		"sr-Latn-BA",
		"sr-Latn-CS",
		"sr-Latn-ME",
		"sr-Latn-RS",
		"sr-Latn",
		"sr",
		"st-ZA",
		"st",
		"sv-FI",
		"sv-SE",
		"sv",
		"sw-KE",
		"sw",
		"syr-SY",
		"syr",
		"ta-IN",
		"ta-LK",
		"ta",
		"tdd-Tale-CN",
		"te-IN",
		"te",
		"tg-Cyrl-TJ",
		"tg-Cyrl",
		"tg",
		"th-TH",
		"th",
		"ti-ER",
		"ti-ET",
		"ti",
		"tk-TM",
		"tk",
		"tmz-MA",
		"tn-BW",
		"tn-ZA",
		"tn",
		"tr-TR",
		"tr",
		"ts-ZA",
		"ts",
		"tt-RU",
		"tt",
		"tzm-Arab-MA",
		"tzm-Latn-DZ",
		"tzm-Latn",
		"tzm-Tfng-MA",
		"tzm-Tfng",
		"tzm",
		"ug-CN",
		"ug",
		"uk-UA",
		"uk",
		"ur-IN",
		"ur-PK",
		"ur",
		"uz-Cyrl-UZ",
		"uz-Cyrl",
		"uz-Latn-UZ",
		"uz-Latn",
		"uz",
		"ve-ZA",
		"ve",
		"vi-VN",
		"vi",
		"wo-SN",
		"wo",
		"xh-ZA",
		"xh",
		"yi-001",
		"yi",
		"yo-NG",
		"yo",
		"zh-CN",
		"zh-Hans",
		"zh-Hant",
		"zh-HK",
		"zh-MO",
		"zh-SG",
		"zh-TW",
		"zh-yue-HK",
		"zh",
		"zu-ZA",
		"zu",
	}

	macBigSurLocales = []string{
		"C",
		"POSIX",
		"af_ZA",
		"af_ZA.ISO8859-1",
		"af_ZA.ISO8859-15",
		"af_ZA.UTF-8",
		"am_ET",
		"am_ET.UTF-8",
		"be_BY",
		"be_BY.CP1131",
		"be_BY.CP1251",
		"be_BY.ISO8859-5",
		"be_BY.UTF-8",
		"bg_BG",
		"bg_BG.CP1251",
		"bg_BG.UTF-8",
		"ca_ES",
		"ca_ES.ISO8859-1",
		"ca_ES.ISO8859-15",
		"ca_ES.UTF-8",
		"cs_CZ",
		"cs_CZ.ISO8859-2",
		"cs_CZ.UTF-8",
		"da_DK",
		"da_DK.ISO8859-1",
		"da_DK.ISO8859-15",
		"da_DK.UTF-8",
		"de_AT",
		"de_AT.ISO8859-1",
		"de_AT.ISO8859-15",
		"de_AT.UTF-8",
		"de_CH",
		"de_CH.ISO8859-1",
		"de_CH.ISO8859-15",
		"de_CH.UTF-8",
		"de_DE",
		"de_DE.ISO8859-1",
		"de_DE.ISO8859-15",
		"de_DE.UTF-8",
		"el_GR",
		"el_GR.ISO8859-7",
		"el_GR.UTF-8",
		"en_AU",
		"en_AU.ISO8859-1",
		"en_AU.ISO8859-15",
		"en_AU.US-ASCII",
		"en_AU.UTF-8",
		"en_CA",
		"en_CA.ISO8859-1",
		"en_CA.ISO8859-15",
		"en_CA.US-ASCII",
		"en_CA.UTF-8",
		"en_GB",
		"en_GB.ISO8859-1",
		"en_GB.ISO8859-15",
		"en_GB.US-ASCII",
		"en_GB.UTF-8",
		"en_IE",
		"en_IE.UTF-8",
		"en_NZ",
		"en_NZ.ISO8859-1",
		"en_NZ.ISO8859-15",
		"en_NZ.US-ASCII",
		"en_NZ.UTF-8",
		"en_US",
		"en_US.ISO8859-1",
		"en_US.ISO8859-15",
		"en_US.US-ASCII",
		"en_US.UTF-8",
		"es_ES",
		"es_ES.ISO8859-1",
		"es_ES.ISO8859-15",
		"es_ES.UTF-8",
		"et_EE",
		"et_EE.ISO8859-15",
		"et_EE.UTF-8",
		"eu_ES",
		"eu_ES.ISO8859-1",
		"eu_ES.ISO8859-15",
		"eu_ES.UTF-8",
		"fi_FI",
		"fi_FI.ISO8859-1",
		"fi_FI.ISO8859-15",
		"fi_FI.UTF-8",
		"fr_BE",
		"fr_BE.ISO8859-1",
		"fr_BE.ISO8859-15",
		"fr_BE.UTF-8",
		"fr_CA",
		"fr_CA.ISO8859-1",
		"fr_CA.ISO8859-15",
		"fr_CA.UTF-8",
		"fr_CH",
		"fr_CH.ISO8859-1",
		"fr_CH.ISO8859-15",
		"fr_CH.UTF-8",
		"fr_FR",
		"fr_FR.ISO8859-1",
		"fr_FR.ISO8859-15",
		"fr_FR.UTF-8",
		"he_IL",
		"he_IL.UTF-8",
		"hi_IN.ISCII-DEV",
		"hr_HR",
		"hr_HR.ISO8859-2",
		"hr_HR.UTF-8",
		"hu_HU",
		"hu_HU.ISO8859-2",
		"hu_HU.UTF-8",
		"hy_AM",
		"hy_AM.ARMSCII-8",
		"hy_AM.UTF-8",
		"is_IS",
		"is_IS.ISO8859-1",
		"is_IS.ISO8859-15",
		"is_IS.UTF-8",
		"it_CH",
		"it_CH.ISO8859-1",
		"it_CH.ISO8859-15",
		"it_CH.UTF-8",
		"it_IT",
		"it_IT.ISO8859-1",
		"it_IT.ISO8859-15",
		"it_IT.UTF-8",
		"ja_JP",
		"ja_JP.SJIS",
		"ja_JP.UTF-8",
		"ja_JP.eucJP",
		"kk_KZ",
		"kk_KZ.PT154",
		"kk_KZ.UTF-8",
		"ko_KR",
		"ko_KR.CP949",
		"ko_KR.UTF-8",
		"ko_KR.eucKR",
		"lt_LT",
		"lt_LT.ISO8859-13",
		"lt_LT.ISO8859-4",
		"lt_LT.UTF-8",
		"nl_BE",
		"nl_BE.ISO8859-1",
		"nl_BE.ISO8859-15",
		"nl_BE.UTF-8",
		"nl_NL",
		"nl_NL.ISO8859-1",
		"nl_NL.ISO8859-15",
		"nl_NL.UTF-8",
		"no_NO",
		"no_NO.ISO8859-1",
		"no_NO.ISO8859-15",
		"no_NO.UTF-8",
		"pl_PL",
		"pl_PL.ISO8859-2",
		"pl_PL.UTF-8",
		"pt_BR",
		"pt_BR.ISO8859-1",
		"pt_BR.UTF-8",
		"pt_PT",
		"pt_PT.ISO8859-1",
		"pt_PT.ISO8859-15",
		"pt_PT.UTF-8",
		"ro_RO",
		"ro_RO.ISO8859-2",
		"ro_RO.UTF-8",
		"ru_RU",
		"ru_RU.CP1251",
		"ru_RU.CP866",
		"ru_RU.ISO8859-5",
		"ru_RU.KOI8-R",
		"ru_RU.UTF-8",
		"sk_SK",
		"sk_SK.ISO8859-2",
		"sk_SK.UTF-8",
		"sl_SI",
		"sl_SI.ISO8859-2",
		"sl_SI.UTF-8",
		"sr_YU",
		"sr_YU.ISO8859-2",
		"sr_YU.ISO8859-5",
		"sr_YU.UTF-8",
		"sv_SE",
		"sv_SE.ISO8859-1",
		"sv_SE.ISO8859-15",
		"sv_SE.UTF-8",
		"tr_TR",
		"tr_TR.ISO8859-9",
		"tr_TR.UTF-8",
		"uk_UA",
		"uk_UA.ISO8859-5",
		"uk_UA.KOI8-U",
		"uk_UA.UTF-8",
		"zh_CN",
		"zh_CN.GB18030",
		"zh_CN.GB2312",
		"zh_CN.GBK",
		"zh_CN.UTF-8",
		"zh_CN.eucCN",
		"zh_HK",
		"zh_HK.Big5HKSCS",
		"zh_HK.UTF-8",
		"zh_TW",
		"zh_TW.Big5",
		"zh_TW.UTF-8",
	}

	ubuntuLocales = []string{
		"C",
		"C.UTF-8",
		"en_AG",
		"en_AG.utf8",
		"en_AU.utf8",
		"en_BW.utf8",
		"en_CA.utf8",
		"en_DK.utf8",
		"en_GB.utf8",
		"en_HK.utf8",
		"en_IE.utf8",
		"en_IL",
		"en_IL.utf8",
		"en_IN",
		"en_IN.utf8",
		"en_NG",
		"en_NG.utf8",
		"en_NZ.utf8",
		"en_PH.utf8",
		"en_SG.utf8",
		"en_US.utf8",
		"en_ZA.utf8",
		"en_ZM",
		"en_ZM.utf8",
		"en_ZW.utf8",
		"ja_JP.utf8",
		"POSIX",
	}
)
